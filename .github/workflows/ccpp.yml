name: C/C++ CI for Web

on:
  push:
    branches: [ web ]
    tags: [ v** ]
  pull_request:
    branches: [ web ]

jobs:
  build:
    if: ${{ !contains(github.event.head_commit.message, '[ci skip]') }}
    container: 
      image: trzeci/emscripten:1.39.10-upstream
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create build folder
        working-directory: Web
        run: mkdir build
      - name: Create project using cmake
        working-directory: Web/build
        run: emcmake cmake -DCMAKE_BUILD_TYPE=Release ..
      - name: Cache boost
        id: cache_boost
        uses: actions/cache@v1
        env:
          cache-name: cache-boost-headers
        with:
          path: Dependencies/boost_1_72_0/boost
          key: ${{ runner.os }}-build-${{ env.cache-name }}
      - name: Download boost
        if: ${{ !steps.cache_boost.outputs.cache-hit }}
        working-directory: Dependencies
        run: |
          git clone --recursive https://github.com/boostorg/boost.git --branch boost-1.72.0
          mv boost boost_1_72_0
      - name: Place boost
        if: ${{ !steps.cache_boost.outputs.cache-hit }}
        working-directory: Dependencies/boost_1_72_0
        run: |
          ./bootstrap.sh
          ./b2 headers
          mkdir boost_tmp
          cp -L -r boost boost_tmp
          rm -r boost
          mv boost_tmp/boost boost
      - name: Cache emscripten ports
        id: cache_emscripten_ports
        uses: actions/cache@v1
        env:
          cache-name: cache-emscripten-ports
        with:
          path: /emsdk_portable/.data/cache
          key: ${{ runner.os }}-build-${{ env.cache-name }}
      - name: Prebuild emscripten ports
        if: ${{ !steps.cache_emscripten_ports.outputs.cache-hit }}
        run: |
          embuilder.py build ogg
          embuilder.py build vorbis
          embuilder.py build libpng
          embuilder.py build freetype
          embuilder.py build harfbuzz
      - name: Build project
        working-directory: Web/build
        run: emmake make 
      - name: Bundle output
        run: |
          mkdir Package
          cp -r Siv3D/include Package
          cp Web/build/libSiv3D.a Package
          cp Web/App/resources Package
          cp Web/App/example Package
          cp Web/App/Siv3D.js Package
          zip -r OpenSiv3D.zip Package
          tar -cvzf OpenSiv3D.tgz Package/*
      - name: Save Bundles
        uses: actions/upload-artifact@v2
        with:
          name: OpenSiv3D-Bundles
          path: OpenSiv3D.*

  deploy:
    if: ${{ contains(github.ref, 'tags/v') }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Restore Bundles
        uses: actions/download-artifact@v2
        with:
          name: OpenSiv3D-Bundles
          path: .
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
      - name: Upload Release Asset (zip)
        id: upload-release-asset-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: OpenSiv3D.zip
          asset_name: OpenSiv3D.zip
          asset_content_type: application/zip
      - name: Upload Release Asset (tgz)
        id: upload-release-asset-tgz
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: OpenSiv3D.tgz
          asset_name: OpenSiv3D.tgz
          asset_content_type: application/gzip
