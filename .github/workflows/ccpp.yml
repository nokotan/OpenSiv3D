name: C/C++ CI for Web

on:
  push:
    branches: [ web, web** ]
    tags: [ v** ]
  pull_request:
    branches: [ web, web** ]

jobs:
  build:
    if: ${{ !contains(github.event.head_commit.message, '[ci skip]') }}
    strategy:
      matrix:
        config:
          - name: wasm
            container: 'emscripten/emsdk:2.0.4'
            cmake-config: ''
            embuilder-config: ''
            output-file: 'libSiv3D.a'
            external-lib-folder-name: wasm
          - name: wasm-pic
            container: 'emscripten/emsdk:2.0.4'
            cmake-config: '-DSIV3D_BUILD_SHARED_WASM=1'
            embuilder-config: '--pic'
            output-file: 'Siv3D.wasm'
            external-lib-folder-name: wasm-pic
          - name: asmjs
            container: 'trzeci/emscripten:1.39.13-fastcomp'
            cmake-config: '-DSIV3D_BUILD_WITH_FASTCOMP_SUPPORT=1'
            embuilder-config: ''
            output-file: 'libSiv3D.a'
            external-lib-folder-name: asmjs
          - name: wasm-2.0.22
            container: 'emscripten/emsdk:2.0.22'
            cmake-config: ''
            embuilder-config: ''
            output-file: 'libSiv3D.a'
            external-lib-folder-name: wasm-2.0.22
          - name: wasm-pic-main-2.0.22
            container: 'emscripten/emsdk:2.0.22'
            cmake-config: '-DSIV3D_BUILD_SHARED_MAIN=1'
            embuilder-config: '--pic'
            output-file: 'Siv3D*'
            external-lib-folder-name: wasm-pic
    container: 
      image: ${{ matrix.config.container }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create build folder
        working-directory: Web
        run: mkdir build

      - name: Create project using cmake
        working-directory: Web/build
        run: emcmake cmake -DCMAKE_BUILD_TYPE=Release ${{ matrix.config.cmake-config }} ..

      - name: Cache boost
        id: cache_boost
        uses: actions/cache@v1
        env:
          cache-name: cache-boost-headers
        with:
          path: Dependencies/boost_1_72_0/boost
          key: ${{ runner.os }}-build-${{ env.cache-name }}

      - name: Download boost
        if: ${{ !steps.cache_boost.outputs.cache-hit }}
        working-directory: Dependencies
        run: |
          git clone --recursive https://github.com/boostorg/boost.git --branch boost-1.72.0
          mv boost boost_1_72_0

      - name: Place boost
        if: ${{ !steps.cache_boost.outputs.cache-hit }}
        working-directory: Dependencies/boost_1_72_0
        run: |
          ./bootstrap.sh
          ./b2 headers
          mkdir boost_tmp
          cp -L -r boost boost_tmp
          rm -r boost
          mv boost_tmp/boost boost

      - name: Load EM_CACHE
        shell: bash
        run: |
          if [ ! -z "${EM_DATA}" ]; then
            echo "EM_CACHE=${EM_DATA}" >> $GITHUB_ENV;
          elif source emsdk_env.sh && [ ! -z "${EM_CACHE}" ]; then
            echo "EM_CACHE=${EM_CACHE}" >> $GITHUB_ENV;
          else
            echo "EM_CACHE=${EMSDK}/upstream/emscripten/cache" >> $GITHUB_ENV;
          fi

      - name: Cache emscripten ports
        id: cache_emscripten_ports
        uses: actions/cache@v1
        env:
          cache-name: cache-emscripten-ports-3
        with:
          path: ${{ env.EM_CACHE }}
          key: ${{ matrix.config.name }}-${{ runner.os }}-${{ env.cache-name }}

      - name: Prebuild emscripten ports
        if: ${{ !steps.cache_emscripten_ports.outputs.cache-hit }}
        run: |
          embuilder.py build ${{ matrix.config.embuilder-config }} ogg vorbis libpng freetype harfbuzz

      - name: Cache Build result
        id: cache_siv3d_library
        uses: actions/cache@v1
        env:
          cache-name: cache-siv3d-library
        with:
          path: Web/build
          key: ${{ matrix.config.name }}-${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('Siv3D/**/*.*', 'Web/CMakeLists.txt', 'Web/build/CMakeCache.txt') }}

      - name: Build project
        if: ${{ !steps.cache_siv3d_library.outputs.cache-hit && contains(matrix.config.name, 'pic-main') }}
        working-directory: Web/build
        run: |
          cmake --build . --target Siv3DAppData
          patch Siv3D.data.js < ../Siv3D.data.js.patch
          cmake --build . --target Siv3D --parallel 4 

      - name: Build project
        if: ${{ !steps.cache_siv3d_library.outputs.cache-hit && !contains(matrix.config.name, 'pic-main') }}
        working-directory: Web/build
        run: cmake --build . --parallel 4 

      - name: Bundle output
        run: |
          mkdir Package
          cp -r Siv3D/include Package
          cp -r Siv3D/lib/Web/${{ matrix.config.external-lib-folder-name }} Package
          cp -r Web/App/resources Package
          cp -r Web/App/example Package
          mv Package/${{ matrix.config.external-lib-folder-name }} Package/lib
          cp Web/App/Siv3D.js Package/lib
          cp Web/build/${{ matrix.config.output-file }} Package/lib
          zip -r OpenSiv3D.zip Package
          tar -cvzf OpenSiv3D.tgz Package/*

      - name: Save Bundles
        uses: actions/upload-artifact@v2
        with:
          name: OpenSiv3D-Bundles-${{ matrix.config.name }}
          path: OpenSiv3D.*

  build-app:
    needs: build
    strategy:
      matrix:
        config:
          - name: wasm
            container: 'emscripten/emsdk:2.0.4'
            cmake-config: ''
          - name: wasm-pic
            container: 'emscripten/emsdk:2.0.4'
            cmake-config: '-DSIV3D_BUILD_WITH_SHARED_WASM=1'
          - name: asmjs
            container: 'trzeci/emscripten:1.39.13-fastcomp'
            cmake-config: '-DSIV3D_BUILD_WITH_FASTCOMP_SUPPORT=1'
          - name: wasm-2.0.22
            container: 'emscripten/emsdk:2.0.22'
            cmake-config: ''
          - name: wasm-pic-main-2.0.22
            container: 'emscripten/emsdk:2.0.22'
            cmake-config: '-DSIV3D_BUILD_WITH_SHARED_MAIN=1'
    container: 
      image: ${{ matrix.config.container }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create build folder
        working-directory: Web/App
        run: mkdir build

      - name: Load EM_CACHE
        shell: bash
        run: |
          if [ ! -z "${EM_DATA}" ]; then
            echo "EM_CACHE=${EM_DATA}" >> $GITHUB_ENV;
          elif source emsdk_env.sh && [ ! -z "${EM_CACHE}" ]; then
            echo "EM_CACHE=${EM_CACHE}" >> $GITHUB_ENV;
          else
            echo "EM_CACHE=${EMSDK}/upstream/emscripten/cache" >> $GITHUB_ENV;
          fi

      - name: Restore emscripten ports
        id: cache_emscripten_ports
        uses: actions/cache@v1
        env:
          cache-name: cache-emscripten-ports-3
        with:
          path: ${{ env.EM_CACHE }}
          key: ${{ matrix.config.name }}-${{ runner.os }}-${{ env.cache-name }}

      - name: Restore Bundles
        uses: actions/download-artifact@v2
        with:
          name: OpenSiv3D-Bundles-${{ matrix.config.name }}
          path: .

      - name: Restore Siv3D library
        run: |
          tar -xvf OpenSiv3D.tgz
          mkdir Web/Build
          cp -r Package/lib/* Web/Build

      - name: Create project using cmake
        working-directory: Web/App/build
        run: emcmake cmake -DCMAKE_BUILD_TYPE=Release ${{ matrix.config.cmake-config }} ..

      - name: Build Siv3d App
        working-directory: Web/App/build
        run: cmake --build .

      - name: Save Bundles
        uses: actions/upload-artifact@v2
        with:
          name: Siv3D_App-${{ matrix.config.name }}
          path: |
            Web/App/build/Siv3D.*
            Web/App/build/Siv3D_App.*

  build-installer:
    needs: build
    runs-on: windows-latest
    strategy:
      matrix:
        config:
          - name: wasm
            script: "Setup.iss"
          - name: asmjs
            script: "Setup-asmjs.iss"
          - name: wasm-2.0.22
            script: "Setup-2.0.22.iss"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Restore Bundles
        uses: actions/download-artifact@v2
        with:
          name: OpenSiv3D-Bundles-${{ matrix.config.name }}
          path: .

      - name: Restore Siv3D library
        run: |
          tar -xvf OpenSiv3D.tgz
          mkdir Web/Build
          cp -r Package/lib/* Web/Build
          
      - name: Compress Project Template
        working-directory: Web/VisualStudioTemplate/OpenSiv3D(0.4.3)Web
        run: |
          7z a -tzip "OpenSiv3D(0.4.3)Web.zip" .
          cp "OpenSiv3D(0.4.3)Web.zip" ..
          
      - name: Create Installer
        working-directory: Web/WindowsInstaller
        run: |
          mkdir Output
          iscc /O"Output" "./${{ matrix.config.script }}"
          
      - name: Save Bundles
        uses: actions/upload-artifact@v2
        with:
          name: OpenSiv3D-Installer-${{ matrix.config.name }}
          path: Web/WindowsInstaller/Output/*.exe
        
  pre-deploy:
    if: ${{ contains(github.ref, 'tags/v') }}
    needs: build
    runs-on: ubuntu-latest

    outputs: 
      upload_url: ${{ steps.output-upload-url.outputs.upload-url }}

    steps:
      - name: Create release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
      
      - name: Output upload url
        id: output-upload-url
        run: echo "::set-output name=upload-url::${{ steps.create-release.outputs.upload_url }}"

  deploy:
    needs: pre-deploy
    runs-on: ubuntu-latest

    strategy:
      matrix:
        config:
          - name: wasm
          - name: asmjs
          - name: wasm-2.0.22

    steps:
      - name: Restore Bundles
        uses: actions/download-artifact@v2
        with:
          name: OpenSiv3D-Bundles-${{ matrix.config.name }}
          path: .

      - name: Restore Installer
        uses: actions/download-artifact@v2
        with:
          name: OpenSiv3D-Installer-${{ matrix.config.name }}
          path: .

      - name: Upload Release Asset (zip)
        id: upload-release-asset-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.pre-deploy.outputs.upload_url }}
          asset_path: OpenSiv3D.zip
          asset_name: OpenSiv3D-${{ matrix.config.name }}.zip
          asset_content_type: application/zip

      - name: Upload Release Asset (tgz)
        id: upload-release-asset-tgz
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.pre-deploy.outputs.upload_url }}
          asset_path: OpenSiv3D.tgz
          asset_name: OpenSiv3D-${{ matrix.config.name }}.tgz
          asset_content_type: application/gzip

      - name: Upload Installer
        id: upload-release-asset-exe
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.pre-deploy.outputs.upload_url }}
          asset_path: OpenSiv3D(0.4.3)Web.exe
          asset_name: OpenSiv3D-Installer-${{ matrix.config.name }}.exe
          asset_content_type: application/octet-stream

  deploy-gh-pages:
    needs: build-app
    runs-on: ubuntu-latest

    steps:
      - name: Create Destination Folders
        run: |
          mkdir Dest
          mkdir Dest/lib
          mkdir Dest/wasm-app
          mkdir Dest/wasm-pic-app
          mkdir Dest/wasm-pic-main-app
          mkdir Dest/asmjs-app

      - name: Restore Bundles
        uses: actions/download-artifact@v2
        with:
          name: OpenSiv3D-Bundles-wasm-pic-main-2.0.22
          path: .

      - name: Restore Siv3D library
        run: tar -xvf OpenSiv3D.tgz

      - name: Place Siv3D library
        run: |
          cp Package/lib/Siv3D.wasm Dest/lib
          cp Package/lib/Siv3D.js Dest/lib
          cp Package/lib/Siv3D.data Dest/lib

      - name: Place Siv3D Apps (wasm)
        uses: actions/download-artifact@v2
        with:
          name: Siv3D_App-wasm
          path: Dest/wasm-app

      - name: Place Siv3D Apps (wasm-pic)
        uses: actions/download-artifact@v2
        with:
          name: Siv3D_App-wasm-pic
          path: Dest/wasm-pic-app

      - name: Place Siv3D Apps (wasm-pic-main)
        uses: actions/download-artifact@v2
        with:
          name: Siv3D_App-wasm-pic-main-2.0.22
          path: Dest/wasm-pic-main-app

      - name: Place Siv3D Apps (asmjs)
        uses: actions/download-artifact@v2
        with:
          name: Siv3D_App-asmjs
          path: Dest/asmjs-app

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./Dest
          keep_files: true
          
  custom-web-hook:
    needs: [ pre-deploy, deploy ]
    runs-on: ubuntu-latest
    
    steps:
      - run: |
          curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/nokotan/OpenSiv3DForWeb-VSCode/actions/workflows/update.yml/dispatches" \
          -d '{ "ref": "master", "inputs": { "name": "Update ${{ github.ref }}", "url": "${{ needs.pre-deploy.outputs.upload_url }}" } }'
