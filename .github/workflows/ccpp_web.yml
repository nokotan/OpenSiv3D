name: C/C++ CI for Web

on:
  push:
    branches: [ v6_* ]
    tags: [ v** ]
  pull_request:
    branches: [ v6_* ]

jobs:
  pre-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Boost
        uses: ./.github/actions/download-boost
        with:
          version: '1.74.0'
          destination: Dependencies/boost_1_74_0

  build:
    needs: pre-build
    strategy:
      matrix:
        config:
          - name: wasm
            container: 'emscripten/emsdk:3.1.8'
            cmake-cflags: ''
          - name: wasm-mt
            container: 'emscripten/emsdk:3.1.8'
            cmake-cflags: '-pthread'
          - name: wasm-simd
            container: 'emscripten/emsdk:3.1.8'
            cmake-cflags: '-msimd128 -msse4.2'
          - name: wasm-mt-simd
            container: 'emscripten/emsdk:3.1.8'
            cmake-cflags: '-pthread -msimd128 -msse4.2'
          - name: wasm-side-module
            container: 'emscripten/emsdk:3.1.8'
            cmake-cflags: '-fPIC'
    container: 
      image: ${{ matrix.config.container }}
    runs-on: ubuntu-latest

    outputs: 
      cache-hit: ${{ steps.cache-siv3d-library.outputs.cache-hit }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create build folder
        run: mkdir Web/build

      - name: Cache OpenSiv3D Build result
        id: cache_siv3d_library
        uses: actions/cache@v1
        env:
          cache-name: cache-siv3d-library
        with:
          path: Web/Package
          key: ${{ matrix.config.name }}-${{ env.cache-name }}-${{ hashFiles('Siv3D/**/*.*', 'Web/CMakeLists.txt') }}

      - name: Cache boost
        if: ${{ !steps.cache_siv3d_library.outputs.cache-hit }}
        uses: actions/cache@v1
        env:
          cache-name: cache-boost-headers-1
        with:
          path: Dependencies/boost_1_74_0
          key: ${{ env.cache-name }}

      - name: Prebuild emscripten ports
        if: ${{ !steps.cache_siv3d_library.outputs.cache-hit }}
        run: |
          embuilder.py build ogg vorbis libpng

      - name: Build project
        if: ${{ !steps.cache_siv3d_library.outputs.cache-hit }}
        working-directory: Web/build
        run: |
          emcmake cmake -DCMAKE_BUILD_TYPE=Release \
            ${{ matrix.config.cmake-additional-flags }} \
            -DCMAKE_C_FLAGS="${{ matrix.config.cmake-cflags }}" \
            -DCMAKE_CXX_FLAGS="${{ matrix.config.cmake-cflags }}" ..
          cmake --build . --parallel 4
          cmake --install . --prefix ../Package

      - name: Bundle output
        working-directory: Web/
        run: |
          cp -r App/resources Package
          cp -r App/example Package   
          zip -r OpenSiv3D.zip Package
          tar -cvzf OpenSiv3D.tgz Package/*

      - name: Save Bundles
        uses: actions/upload-artifact@v2
        with:
          name: OpenSiv3D-Bundles-${{ matrix.config.name }}
          path: Web/OpenSiv3D.*

  test:
    needs: build
    strategy:
      matrix:
        config:
          - name: wasm
            container: 'emscripten/emsdk:3.1.8'
            cmake-cflags: ''
          # - name: wasm-simd
          #  container: 'emscripten/emsdk:3.1.8'
          #  cmake-cflags: '-msimd128 -msse4.2'
    container: 
      image: ${{ matrix.config.container }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Create build folder  
        run: mkdir Web/App/build
  
      - name: Restore Bundles
        uses: actions/download-artifact@v2
        with:
          name: OpenSiv3D-Bundles-${{ matrix.config.name }}
          path: Web
      - name: Restore Siv3D library
        working-directory: Web
        run: tar -xvf OpenSiv3D.tgz

      - name: Cache OpenSiv3D Test Build result
        id: cache_siv3d_test
        uses: actions/cache@v1
        env:
          cache-name: cache-siv3d-test
        with:
          path: Web/App
          key: ${{ matrix.config.name }}-${{ env.cache-name }}-${{ hashFiles('Web/build/*.a', 'Web/App/**/*.*', 'Test/**/*.*') }}

      - name: Create & Build test project
        if: ${{ !steps.cache_siv3d_test.outputs.cache-hit }}
        working-directory: Web/App/build
        run: |
          emcmake cmake -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_FIND_ROOT_PATH=$(dirname $(dirname $(pwd)))/Package \
            -DCMAKE_PREFIX_PATH=$(dirname $(dirname $(pwd)))/Package \
            -DCMAKE_C_FLAGS="${{ matrix.config.cmake-cflags }}" \
            -DCMAKE_CXX_FLAGS="${{ matrix.config.cmake-cflags }}" ..
          cmake --build . --target Siv3DTest

      - name: Test project
        working-directory: Web/App
        run: node --experimental-wasm-simd Siv3DTest.js

  build-app:
    needs: build
    strategy:
      matrix:
        config:
          - name: wasm
            app-name: wasm
            container: 'emscripten/emsdk:3.1.8'
            cmake-cflags: ''
            cmake-additional-flags: ''
          - name: wasm-simd
            app-name: wasm-simd
            container: 'emscripten/emsdk:3.1.8'
            cmake-cflags: '-msimd128 -msse4.2'
            cmake-additional-flags: ''
          - name: wasm
            app-name: wasm-wgpu
            container: 'emscripten/emsdk:3.1.8'
            cmake-cflags: ''
            cmake-additional-flags: '-DSIV3D_WEBGPU_BACKEND=On'
          - name: wasm-side-module
            app-name: wasm-side-module
            container: 'emscripten/emsdk:3.1.8'
            cmake-cflags: ''
            cmake-additional-flags: '-DSIV3D_BUILD_WITH_SHARED_MAIN=On'
    container: 
      image: ${{ matrix.config.container }}
    runs-on: ubuntu-latest

    outputs: 
      cache-hit: ${{ steps.cache_siv3d_app.outputs.cache-hit }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create build folder
        working-directory: Web/App
        run: mkdir build

      - name: Restore Bundles
        uses: actions/download-artifact@v2
        with:
          name: OpenSiv3D-Bundles-${{ matrix.config.name }}
          path: Web
      - name: Restore Siv3D library
        working-directory: Web
        run: tar -xvf OpenSiv3D.tgz

      - name: Cache OpenSiv3D App Build result
        id: cache_siv3d_app
        uses: actions/cache@v1
        env:
          cache-name: cache-siv3d-app
        with:
          path: Web/App
          key: ${{ matrix.config.app-name }}-${{ env.cache-name }}-${{ hashFiles('Web/Package/**/*.*', 'Web/App/**/*.*') }}

      - name: Create & Build Siv3d App
        if: ${{ !steps.cache_siv3d_app.outputs.cache-hit }}
        working-directory: Web/App/build
        run: |
          emcmake cmake -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_FIND_ROOT_PATH=$(dirname $(dirname $(pwd)))/Package \
            -DCMAKE_PREFIX_PATH=$(dirname $(dirname $(pwd)))/Package \
            -DCMAKE_C_FLAGS="${{ matrix.config.cmake-cflags }}" \
            -DCMAKE_CXX_FLAGS="${{ matrix.config.cmake-cflags }}" \
            ${{ matrix.config.cmake-additional-flags }} ..
          cmake --build .

      - name: Save Bundles
        uses: actions/upload-artifact@v2
        with:
          name: Siv3DApp-${{ matrix.config.app-name }}
          path: Web/App/Siv3DApp.*

  build-installer:
    needs: build
    runs-on: windows-latest
    strategy:
      matrix:
        config:
          - name: wasm
            script: "Setup.iss"
          - name: wasm-simd
            script: "Setup.iss"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Restore Bundles
        uses: actions/download-artifact@v2
        with:
          name: OpenSiv3D-Bundles-${{ matrix.config.name }}
          path: .

      - name: Restore Siv3D library
        run: |
          tar -xvf OpenSiv3D.tgz
          mkdir Web/Build
          cp -r Package/lib/* Web/Build

      - name: Cache OpenSiv3D Installer result
        id: cache_siv3d_installer
        uses: actions/cache@v1
        env:
          cache-name: cache_siv3d_installer
        with:
          path: Web/WindowsInstaller/Output
          key: ${{ matrix.config.name }}-${{ env.cache-name }}-${{ hashFiles('Web/WindowsInstaller/setup.iss', 'Web/Build') }}
          
      - name: Compress Project Template
        if: ${{ !steps.cache_siv3d_installer.outputs.cache-hit }}
        working-directory: Web/VisualStudioTemplate/Files
        run: |
          7z a -tzip "OpenSiv3D(0.6.4)Web.zip" .
          cp "OpenSiv3D(0.6.4)Web.zip" ..
          
      - name: Create Installer
        if: ${{ !steps.cache_siv3d_installer.outputs.cache-hit }}
        working-directory: Web/WindowsInstaller
        run: |
          mkdir Output
          iscc /O"Output" "./${{ matrix.config.script }}"
       
      - name: Save Bundles
        uses: actions/upload-artifact@v2
        with:
          name: OpenSiv3D-Installer-${{ matrix.config.name }}
          path: Web/WindowsInstaller/Output/*.exe

  test-installer:
    needs: build-installer
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: wasm
            script: "Setup.iss"
          - name: wasm-simd
            script: "Setup.iss"
    env:
      MSBuild_path: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\bin"
      VSIXInstaller_Path: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE"
      DevEnv_Path: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\devenv.exe"
      WinAppDriver_Path: "C:\\Program Files (x86)\\Windows Application Driver\\WinAppDriver.exe"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Restore Installer
        uses: actions/download-artifact@v2
        with:
          name: OpenSiv3D-Installer-${{ matrix.config.name }}
          path: Web/WindowsInstaller/

      - name: Test Installer
        working-directory: Web/WindowsInstaller
        run: |
          Set-Item Env:Path "$env:VSIXInstaller_Path;$env:Path"
          & ".\OpenSiv3D(0.6.4)Web.exe" /SILENT /SUPPRESSMSGBOXES /LOG="InstallLog.Log"
          Wait-Process -Name "OpenSiv3D(0.6.4)Web"
          cat InstallLog.Log
          devenv /installvstemplates

      - name: Install VSIX
        run: |
          Set-Item Env:Path "$env:VSIXInstaller_Path;$env:Path"
          VSIXInstaller /quiet /admin Emscripten.Build.Definition.4e942135-f309-41d4-8214-c2e5bd7c7ace 
          Wait-Process -Name "VSIXInstaller"

      - name: Restore Nuget package
        working-directory: Web/WindowsInstaller/Tests/UIAutomatedTest
        run: nuget restore WinAppDriverUIRecorder.sln
      
      - name: Build the application
        working-directory: Web/WindowsInstaller/Tests/UIAutomatedTest
        run: |
          Set-Item Env:Path "$env:MSBuild_Path;$env:Path"
          msbuild WinAppDriverUIRecorder.sln /p:Configuration="Release"

      - name: Run UI Test
        working-directory: Web/WindowsInstaller/Tests/UIAutomatedTest
        continue-on-error: true
        run: |
          Start-Process -FilePath "$env:WinAppDriver_Path" -ArgumentList "127.0.0.1","34723"
          Start-Process -FilePath "$env:DevEnv_Path"
          & ".\bin\Release\UIRecorderTemplate.exe"

      - name: Save Screenshots
        uses: actions/upload-artifact@v2
        with:
          name: OpenSiv3D-Installer-TestScreenShots-${{ matrix.config.name }}
          path: Web/WindowsInstaller/Tests/UIAutomatedTest/*.png

      - name: Clean-up Process
        run: |
          Get-Process | Where-Object -FilterScript {$_.Name -eq "WinAppDriver"}  | Stop-Process
          Get-Process | Where-Object -FilterScript {$_.Name -eq "devenv"}  | Stop-Process
      
  pre-deploy:
    if: ${{ contains(github.ref, 'tags/v') }}
    needs: 
      - build
      - build-installer
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}

  deploy:
    needs: pre-deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config:
          - name: wasm
          - name: wasm-simd
    steps:
      - name: Restore Bundles
        uses: actions/download-artifact@v2
        with:
          name: OpenSiv3D-Bundles-${{ matrix.config.name }}
          path: .
      
      - name: Restore Installer
        uses: actions/download-artifact@v2
        with:
          name: OpenSiv3D-Installer-${{ matrix.config.name }}
          path: .
      
      - name: Upload Release Asset (zip)
        id: upload-release-asset-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.pre-deploy.outputs.upload_url }}
          asset_path: OpenSiv3D.zip
          asset_name: OpenSiv3D-${{ matrix.config.name }}.zip
          asset_content_type: application/zip

      - name: Upload Release Asset (tgz)
        id: upload-release-asset-tgz
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.pre-deploy.outputs.upload_url }}
          asset_path: OpenSiv3D.tgz
          asset_name: OpenSiv3D-${{ matrix.config.name }}.tgz
          asset_content_type: application/gzip

      - name: Upload Installer
        id: upload-release-asset-exe
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.pre-deploy.outputs.upload_url }}
          asset_path: OpenSiv3D(0.6.4)Web.exe
          asset_name: OpenSiv3D-Installer-${{ matrix.config.name }}.exe
          asset_content_type: application/octet-stream


  deploy-gh-pages:
    needs: build-app
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest

    steps:
      - name: Create Destination Folders
        run: |
          mkdir -p Dest/v6-wasm-app
          mkdir -p Dest/v6-wasm-simd-app
          mkdir -p Dest/v6-wasm-side-module-app
          mkdir -p Dest/lib/v6

      - name: Place Siv3D Apps (wasm)
        uses: actions/download-artifact@v2
        with:
          name: Siv3DApp-wasm
          path: Dest/v6-wasm-app

      - name: Place Siv3D Apps (wasm-simd)
        uses: actions/download-artifact@v2
        with:
          name: Siv3DApp-wasm-simd
          path: Dest/v6-wasm-simd-app
          
      - name: Place Siv3D Apps (wasm-webgpu)
        uses: actions/download-artifact@v2
        with:
          name: Siv3DApp-wasm-wgpu
          path: Dest/v6-wasm-wgpu-app

      # - name: Restore Bundles (wasm-side-module)
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: OpenSiv3D-Bundles-wasm-side-module
      #     path: .

      # - name: Restore Siv3D library (wasm-side-module)
      #   run: tar -xvf OpenSiv3D.tgz   

      # - name: Place Siv3D library (wasm-side-module)
      #   run: |
      #     cp Package/lib/Siv3D.wasm Dest/lib/v6
      #     cp Package/lib/Siv3D.js Dest/lib/v6
      #     cp Package/lib/Siv3D.data Dest/lib/v6

      - name: Place Siv3D Apps (wasm-side-module)
        uses: actions/download-artifact@v2
        with:
          name: Siv3DApp-wasm-side-module
          path: Dest/v6-wasm-side-module-app

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./Dest
          keep_files: true

  e2e-test-prerequisites:
    runs-on: ubuntu-latest
    outputs:
      browserstack-keys-found: ${{ steps.check-keys.outputs.keys-found }}
    steps: 
      - name: Check Keys
        id: check-keys
        env: 
          BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
        run: echo "::set-output name=keys-found::${{ env.BROWSERSTACK_USERNAME != '' && env.BROWSERSTACK_ACCESS_KEY != '' }}"

  e2e-test:
    needs: [ build, e2e-test-prerequisites ]
    if: ${{ needs.e2e-test-prerequisites.outputs.browserstack-keys-found == 'true' }}
    runs-on: ubuntu-latest
    container: 
      image: 'emscripten/emsdk:3.1.8'

    steps:
      - name: 'BrowserStack Env Setup'  # Invokes the setup-env action
        uses: browserstack/github-actions/setup-env@master
        with:
          username:  ${{ secrets.BROWSERSTACK_USERNAME }}
          access-key: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
      
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Restore Bundles
        uses: actions/download-artifact@v2
        with:
          name: OpenSiv3D-Bundles-wasm
          path: .
      - name: Restore Siv3D library
        run: |
          tar -xvf OpenSiv3D.tgz
          mkdir Web/build
          cp -r Package/lib/* Web/build

      - name: Install dependencies
        working-directory: Web/CI
        run: npm install
      - name: Building web application to be tested
        working-directory: Web/CI
        run: npm run build
      - name: 'Running test on BrowserStack'  # Invokes the actual test script that would run on BrowserStack browsers
        working-directory: Web/CI
        run: npm test  # See sample test script above
